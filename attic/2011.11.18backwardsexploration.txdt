This was an attempt to see if we could save work by constructing the list of things to kill backwards.
It failed.


>>> primes[3:50]
[7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]
>>> primes[4:50]
[11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229]
>>> primes[4:40]
[11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173]
>>> primes[4:30]
[11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]
>>> len(primes[4:30])
26
>>> units(30)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'units' is not defined
>>> from zns import *
>>> units(30)
[1, 7, 11, 13, 17, 19, 23, 29]
>>> 7**2 % 30
19
>>> 7**3 % 30
13
>>> 7**4 % 30
1
>>> 7**4 % 30
1
>>> 7* 7**4 % 30
7
>>> 7**4 % 30
1
>>> 7**3 % 30
13
>>> 7*7**3 % 30
1
>>> 11**3 % 30
11
>>> 11**2 % 30
1
>>> 17**2 % 30
19
>>> 17**3 % 30
23
>>> 17**4 % 30
1
>>> 29**4 % 30
1
>>> [i**4 % 30 for i in units(30)]
[1, 1, 1, 1, 1, 1, 1, 1]
>>> [i**2 % 30 for i in units(30)]
[1, 19, 1, 19, 19, 1, 19, 1]
>>> [i**2 % 30 for i in [7,11,13,17,23,29]]
[19, 1, 19, 19, 19, 1]
>>> [[i**j for j in range(8)] % 30 for i in [7,11,13,17,23,29]]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
TypeError: unsupported operand type(s) for %: 'list' and 'int'
>>> [[i**j % 30 for j in range(8)] for i in [7,11,13,17,23,29]]
[[1, 7, 19, 13, 1, 7, 19, 13], [1, 11, 1, 11, 1, 11, 1, 11], [1, 13, 19, 7, 1, 13, 19, 7], [1, 17, 19, 23, 1, 17, 19, 23], [1, 23, 19, 17, 1, 23, 19, 17], [1, 29, 1, 29, 1, 29, 1, 29]]
>>> [[i**j % 30 for j in range(8)] for i in [11,17,23,29]]
[[1, 11, 1, 11, 1, 11, 1, 11], [1, 17, 19, 23, 1, 17, 19, 23], [1, 23, 19, 17, 1, 23, 19, 17], [1, 29, 1, 29, 1, 29, 1, 29]]
>>> 7**3 / 11                                         
31.181818181818183
>>> 7**3 / 13
26.384615384615383
>>> 7**3 / 17
20.176470588235293
>>> 7**3 / 41
8.365853658536585
>>> 7**3 / 2 
171.5
>>> 7**3 / 47
7.297872340425532
>>> math.sqrt(7**3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'math' is not defined
>>> math.sqrt(7**3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'math' is not defined
>>> import math
>>> math.sqrt(7**3)
18.520259177452136
>>> #if it has a factor one of the factors must be less than 18.5, so in the set 2,3,5,7,11,13,17
... #so mark off all the SEVENTEENS:
... state
Traceback (most recent call last):
  File "<stdin>", line 3, in <module>
NameError: name 'state' is not defined
>>> state = [-1]*2+[0]*(1000)
>>> 7**2 % 17
15
>>> 7**2  + 2
51
>>> for i in range(51, 7**3, 17):
...     state[i] = 17
... 
>>> state[:400]
[-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> for i in range(17, 7**3, 17):
...     state[i] = 17
... 
>>> state[:400]
[-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> #now do all 13s that aren't 17s
... for i in range(13, 7**3, 13):
...     if state[i]:
...             print("%d" % i)
...     else:state[i] = 13
...             
... 
221
>>> 221/17
13.0
>>> #things that are multiples of 13 but not multiples of 17 *or higher*..
... for i in range(11, 7**3, 11):
...     if state[i]:
...             print(11, "%d" % i)
...     else:state[i] = 11
... 
11 143
11 187
11 286
>>> for i in range(7, 7**3, 7):
...     if state[i]:
...             print(7, "%d" % i)
...     else:state[i] = 7 
... 
7 77
7 91
7 119
7 154
7 182
7 231
7 238
7 273
7 308
>>> 143/11
13.0
>>> 187/11
17.0
>>> 286/11
26.0
>>> for i in range(7, 7**3, 7):
...     if state[i] == 7: state[i] == 0
... 
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
False
>>> for i in range(7, 7**3, 7):
...     if state[i] == 7: state[i] = 0
... 
>>> state[:400]
[-1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 13, 0, 0, 0, 17, 0, 0, 0, 0, 11, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 11, 17, 0, 0, 0, 0, 13, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 17, 13, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 11, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 0, 0, 0, 17, 0, 0, 11, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 17, 0, 13, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 13, 0, 17, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 11, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 11, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 13, 17, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 11, 0, 0, 0, 0, 0, 17, 0, 0, 0, 13, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 13, 0, 0, 0, 17, 0, 0, 0, 11, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 11, 0, 17, 0, 0, 0, 0, 13, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 17, 13, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 11, 0, 13, 0, 0, 0, 0, 0, 0, 17, 0, 11, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 17, 0, 13, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 13, 0, 17, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> for i in range(7, 7**3, 7):
...     if state[i] == 0:
...             print("g:",i,7)
...             state[i]=7
... 
g: 7 7
g: 14 7
g: 21 7
g: 28 7
g: 35 7
g: 42 7
g: 49 7
g: 56 7
g: 63 7
g: 70 7
g: 84 7
g: 98 7
g: 105 7
g: 112 7
g: 126 7
g: 133 7
g: 140 7
g: 147 7
g: 161 7
g: 168 7
g: 175 7
g: 189 7
g: 196 7
g: 203 7
g: 210 7
g: 217 7
g: 224 7
g: 245 7
g: 252 7
g: 259 7
g: 266 7
g: 280 7
g: 287 7
g: 294 7
g: 301 7
g: 315 7
g: 322 7
g: 329 7
g: 336 7
>>> [i for i in range(len(state)) if state[i] == 0]
[2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 29, 30, 31, 32, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 50, 53, 54, 57, 58, 59, 60, 61, 62, 64, 67, 69, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 86, 87, 89, 90, 92, 93, 94, 95, 96, 97, 100, 101, 103, 106, 107, 108, 109, 111, 113, 114, 115, 116, 118, 120, 122, 123, 124, 125, 127, 128, 129, 131, 134, 135, 137, 138, 139, 141, 142, 144, 145, 146, 148, 149, 150, 151, 152, 155, 157, 158, 159, 160, 162, 163, 164, 166, 167, 171, 172, 173, 174, 177, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 197, 199, 200, 201, 202, 205, 206, 207, 211, 212, 213, 214, 215, 216, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 239, 240, 241, 243, 244, 246, 248, 249, 250, 251, 254, 256, 257, 258, 261, 262, 263, 265, 267, 268, 269, 270, 271, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 288, 290, 291, 292, 293, 295, 296, 298, 300, 302, 303, 304, 305, 307, 309, 310, 311, 313, 314, 316, 317, 318, 320, 321, 324, 326, 327, 328, 331, 332, 333, 334, 335, 337, 339, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001]
>>> [i for i in range(len(state)) if state[i] == 0][:50]
[2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 29, 30, 31, 32, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 50, 53, 54, 57, 58, 59, 60, 61, 62, 64, 67, 69, 71, 72, 73, 74, 75, 76]
>>> 7**3
343
>>> 7**3 / 7
49.0
>>> [i for i in range(7**3 // 7) if state[i] == 0][:50]
[2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 29, 30, 31, 32, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48]
>>> kill = [i for i in range(7**3 // 7) if state[i] == 0][:50]
>>> kill
[2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 29, 30, 31, 32, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48]
>>> kill = [i for i in range(7**3 // 7) if state[i] == 0]     
>>> kill
[2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 29, 30, 31, 32, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48]
>>> kill = [i for i in range(7**3 // 5) if state[i] == 0]
>>> kill
[2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 19, 20, 23, 24, 25, 27, 29, 30, 31, 32, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 50, 53, 54, 57, 58, 59, 60, 61, 62, 64, 67]
>>> 5*67
335
>>> for k in kill:
...     if state[k*5]:   
...             print(k,"bad",5)
...     else: state[k*5] = 5
... 
>>> kill = [i for i in range(7**3 // 3) if state[i] == 0]
>>> kill
[2, 3, 4, 5, 6, 8, 9, 12, 16, 18, 19, 23, 24, 27, 29, 31, 32, 36, 37, 38, 41, 43, 46, 47, 48, 53, 54, 57, 58, 59, 61, 62, 64, 67, 69, 71, 72, 73, 74, 76, 79, 81, 82, 83, 86, 87, 89, 92, 93, 94, 96, 97, 101, 103, 106, 107, 108, 109, 111, 113]
>>> #conclusion: this doesn't help, we still need to remove elements from the kill list as we go.



Even this was useless:
>>> kill11 = [m//11 for m in [(x+k*17*13) for k in [0,1] for x in units(13*17)] if m%11 == 0 and m<7**3]
>>> kill7 = [m//7 for m in [(x+k*11*13*17) for k in [0,1,2,3] for x in units(11*13*17)] if m%7 == 0 and m<7**3]


Look there, I got the condition right: it's a subset of the units, those divisible by q (for clarity, the q divided out)

So, suppose p=7 and we want to mark everything up to p**3 but going through primes *backwards*
  first, we figure out that numbers in this range must have a prime <= 20 because sqrt(7**3) ~= 20
  then we compute what we would have to cross off
  (double-checked this by running the loops directly and having it print the uniq ones: the lists match)
q  => kills (q*k for k in kill <-- things to cross off as a q)
17 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
13 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,     18, 19, 20, 21, 22, 23, 24, 25, 26]
11 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,     14, 15, 16, 18, 19, 20,     21, 22, 23, 24, 25,     27,    28, 29, 30, 31]
 7 => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,     12,     14, 15, 16, 18, 19, 20,     21,     23, 24, 25,     27,    28, 29, 30, 31, 32, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48]
 5 => [1, 2, 3, 4, 5, 6,    8, 9, 10,     12,         15, 16, 18, 19, 20,             23, 24, 25,     27,        29, 30, 31, 32, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 50, 53, 54, 57, 58, 59, 60, 61, 62, 64, 67]
 3 => [1, 2, 3, 4,    6,    8, 9,         12,             16, 18, 19,                 23, 24,         27,        29,    31, 32, 36, 37, 38, 41, 43, 46, 47, 48, 53, 54, 57, 58, 59, 61, 62, 64, 67, 69, 71, 72, 73, 74, 76, 79, 81, 82, 83, 86, 87, 89, 92, 93, 94, 96, 97, 101, 103, 106, 107, 108, 109, 111, 113, 114]
 2 => [1, 2,    4,          8,                            16,     19,                 23,                        29, 31, 32, 37, 38, 41, 43, 46, 47, 53, 58, 59, 61, 62, 64, 67, 71, 73, 74, 76, 79, 82, 83, 86, 89, 92, 94, 97, 101, 103, 106, 107, 109, 113, 116, 118, 122, 124, 127, 128, 131, 134, 137, 139, 142, 146, 148, 149, 151, 152, 157, 158, 163, 164, 166, 167]
so is there any structure in these lists we can exploit?
 i...don't think so.
